from flask import Flask, request, jsonify
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from qiskit import QuantumCircuit, transpile
from qiskit.primitives import Estimator
from qiskit.quantum_info import SparsePauliOp
from qiskit.circuit.library import TwoLocal
from qiskit_algorithms import VQE, NumPyMinimumEigensolver
from qiskit_algorithms.optimizers import COBYLA

# Initialize Flask app
app = Flask(__name__)

# Store uploaded files
UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route("/upload", methods=["POST"])
def upload_csv():
    """Endpoint to upload CSV file and process hospital data."""
    if "file" not in request.files:
        return jsonify({"error": "No file part"}), 400
   
    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "No selected file"}), 400

    filepath = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(filepath)

    return jsonify({"message": "File uploaded successfully", "file_path": filepath})

def process_hospital_data(filepath):
    """Load CSV and normalize data for Quantum VQE processing."""
    df = pd.read_csv(filepath)

    # Normalize data (scale between -1 and 1)
    df["Normalized ICU Beds"] = df["ICU Beds"] / df["ICU Beds"].max()
    df["Normalized Ventilators"] = df["Ventilators"] / df["Ventilators"].max()
    df["Normalized PPE"] = df["PPE Distributed"] / df["PPE Distributed"].max()

    # Convert to numpy array for quantum processing
    theta_values = df[["Normalized ICU Beds", "Normalized Ventilators", "Normalized PPE"]].mean(axis=1).to_numpy()

    return df, theta_values

def run_quantum_vqe():
    """Define Hamiltonian and run VQE for hospital resource allocation."""
    healthcare_op = SparsePauliOp.from_list([
        ("IIIII", -1.0523),
        ("IZIII", 0.398),
        ("ZIIZI", -0.398),
        ("ZZIII", -0.011),
        ("XXIII", 0.181),
        ("IIIIX", 0.250),
        ("IIXII", -0.350),
        ("IXIII", 0.290),
    ])

    # Classical Reference Value
    numpy_solver = NumPyMinimumEigensolver()
    result_real = numpy_solver.compute_minimum_eigenvalue(healthcare_op)
    classical_value = result_real.eigenvalue.real

    # Define quantum ansatz
    ansatz = TwoLocal(rotation_blocks="ry", entanglement_blocks="cz")

    # Define optimizer
    optimizer = COBYLA(maxiter=150)

    # Run VQE
    vqe_solver = VQE(estimator=Estimator(), ansatz=ansatz, optimizer=optimizer)
    vqe_result = vqe_solver.compute_minimum_eigenvalue(operator=healthcare_op)

    # Extract optimized values
    optimized_theta_values = vqe_result.optimal_point

    return classical_value, optimized_theta_values

@app.route("/optimize", methods=["POST"])
def optimize_resources():
    """Endpoint to optimize hospital resources using Quantum VQE."""
    try:
        # Read input file path from request
        data = request.json
        filepath = data.get("file_path")

        if not filepath or not os.path.exists(filepath):
            return jsonify({"error": "File not found. Please upload first."}), 400

        # Process hospital data
        df, theta_values = process_hospital_data(filepath)

        # Run Quantum VQE
        classical_value, optimized_values = run_quantum_vqe()

        # Store updated values in DataFrame
        df["Optimized Allocation"] = optimized_values[: len(df)]

        # Save updated data
        updated_filepath = os.path.join(UPLOAD_FOLDER, "optimized_" + os.path.basename(filepath))
        df.to_csv(updated_filepath, index=False)

        return jsonify({
            "classical_reference_value": classical_value,
            "optimized_allocation": optimized_values.tolist(),
            "updated_file_path": updated_filepath
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(port=5000, debug=True)

