# Import core Qiskit libraries
from qiskit import QuantumCircuit, transpile
# Import Qiskit Primitives
from qiskit.primitives import Estimator
# Import Qiskit Algorithms (NEW PATH)
from qiskit_algorithms import NumPyEigensolver, VQE
from qiskit_algorithms.optimizers import COBYLA
import qiskit_algorithms
from qiskit.quantum_info import SparsePauliOp
from qiskit_algorithms import NumPyMinimumEigensolver
from qiskit.circuit.library import TwoLocal
from qiskit_algorithms.optimizers import SPSA
# Core Qiskit imports
from qiskit import QuantumCircuit, transpile
# Import Quantum Simulator (Aer)
from qiskit_aer import Aer
# Import Quantum Primitives (For Estimation Tasks)
from qiskit.primitives import StatevectorEstimator
# Import Quantum Operators (For Defining Hamiltonian)
from qiskit.quantum_info import SparsePauliOp  # Alternative to PauliSumOp
# Import Variational Ansatz (Parameterized Quantum Circuit)
from qiskit.circuit.library import TwoLocal
# Import Qiskit Algorithms (VQE and Optimizers)
from qiskit_algorithms import VQE
from qiskit_algorithms.optimizers import COBYLA, SPSA
# Import Numerical Computation Libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import ace_tools_open as tools
from matplotlib.patches import Patch

# --- Load Real NYC/Brooklyn Hospital Data from CSV ---
csv_file_path = r"C:\Users\masia\OneDrive\Desktop\IBM Quantum Program\2025 NSBE presentation\Final_data_set.csv"

df_hospital_data = pd.read_csv(csv_file_path)

# Normalize the data for VQE processing (scale between -1 and 1)
df_hospital_data["Normalized ICU Beds"] = df_hospital_data["ICU Beds"] / df_hospital_data["ICU Beds"].max()
df_hospital_data["Normalized Ventilators"] = df_hospital_data["Ventilators"] / df_hospital_data["Ventilators"].max()
df_hospital_data["Normalized PPE"] = df_hospital_data["PPE Distributed"] / df_hospital_data["PPE Distributed"].max()

# Convert to numpy array for quantum processing
theta_values_real = df_hospital_data[["Normalized ICU Beds", "Normalized Ventilators", "Normalized PPE"]].mean(axis=1).to_numpy()

# --- Define Real-World Hamiltonian for Hospital Resource Allocation ---
healthcare_op_real = SparsePauliOp.from_list(
    [
        ("IIIII", -1.0523),  # Constant offset term
        ("IZIII", 0.398),  # Resource utilization efficiency term
        ("ZIIZI", -0.398),  # Patient wait time term
        ("ZZIII", -0.011),  # Demand-supply balance term
        ("XXIII", 0.181),  # Entanglement term for interaction effects
        ("IIIIX", 0.250),  # PPE allocation penalty (based on FEMA PPE data)
        ("IIXII", -0.350),  # Ventilator optimization term
        ("IXIII", 0.290),  # Hospital capacity fairness constraint
    ]
)

# --- Compute Classical Reference Value Using NumPyMinimumEigensolver ---
numpy_solver = NumPyMinimumEigensolver()
result_real = numpy_solver.compute_minimum_eigenvalue(healthcare_op_real)  # Corrected method call
ref_value_real = result_real.eigenvalue.real  # Extract minimum eigenvalue
print(f"Updated Classical Reference Value (Real Data): {ref_value_real:.5f}")

# --- Running VQE Optimization ---

# Define quantum ansatz (TwoLocal circuit with entanglement)
ansatz = TwoLocal(rotation_blocks="ry", entanglement_blocks="cz")

# Define optimizer (COBYLA for stability)
optimizer = COBYLA(maxiter=150)

# Instantiate VQE solver
vqe_solver = VQE(estimator=Estimator(), ansatz=ansatz, optimizer=optimizer)

# Compute optimized solution using VQE
vqe_result = vqe_solver.compute_minimum_eigenvalue(operator=healthcare_op_real)

# Extract optimized parameters
optimized_theta_values = vqe_result.optimal_point

# --- Visualizing VQE Results (Updated Chart) ---

# Define hospital names (matching real-world Brooklyn hospitals)
hospital_names = df_hospital_data["Hospital"].tolist()

# Create a color map (dark purple for increase, light purple for decrease)
colors = ["#4B0082" if value >= 0.9 else "#9370DB" for value in theta_values_real]

# Generate updated bar chart
plt.figure(figsize=(10, 6))
plt.barh(hospital_names, theta_values_real, color=colors)
plt.xlabel("Resource Allocation Change (Î¸ Value)", fontsize=12, color="navy")
plt.ylabel("Hospitals", fontsize=12, color="navy")
plt.title("Resource Allocation Adjustments per Hospital (VQE Optimization)", fontsize=14, fontweight="bold", color="purple")
plt.grid(axis="x", linestyle="--", alpha=0.6)

# Add labels to bars
for index, value in enumerate(theta_values_real):
    plt.text(value, index, f"{value:.2f}", va='center', fontsize=10)

# Add legend to the plot

legend_elements = [
    Patch(facecolor='#4B0082', label='Increased Allocation'),
    Patch(facecolor='#9370DB', label='Reduced Allocation')
]
plt.legend(handles=legend_elements, loc='lower right')


# Display the updated DataFrame to the user
import ace_tools_open as tools
tools.display_dataframe_to_user(name="Updated VQE Resource Allocation Adjustments", dataframe=df_hospital_data)

# Show the plot
plt.show()

